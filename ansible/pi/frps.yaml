---
- name: Setup and configure server with Certbot, Nginx, and FRP
  hosts: localhost
  become: yes
  tasks:
    - name: Update all packages
      yum:
        name: '*'
        state: latest

    - name: Setup Certbot in Python venv
      command: python3 -m venv ~/certbot
      args:
        creates: ~/certbot/bin/activate

    - name: Install Certbot and certbot-dns-route53 in venv
      command: "~/certbot/bin/pip install certbot certbot-dns-route53"

    - name: Assume role to get AWS credentials
      shell:
        "aws sts assume-role --role-arn arn:aws:iam::{{ aws_account_id }}:role/service-role/{{ role_name }} --role-session-name certbot"
      register: creds
      no_log: true

    - name: Set AWS Access Key ID
      set_fact:
        AWS_ACCESS_KEY_ID: "{{ creds.stdout | from_json | json_query('Credentials.AccessKeyId') }}"
      no_log: true

    - name: Set AWS Secret Access Key
      set_fact:
        AWS_SECRET_ACCESS_KEY: "{{ creds.stdout | from_json | json_query('Credentials.SecretAccessKey') }}"
      no_log: true

    - name: Set AWS Session Token
      set_fact:
        AWS_SESSION_TOKEN: "{{ creds.stdout | from_json | json_query('Credentials.SessionToken') }}"
      no_log: true

    - name: Obtain SSL certificate using Certbot and Route 53
      command: >
        ~/certbot/bin/certbot certonly --dns-route53 -d petproject.my -d *.petproject.my -n --agree-tos -m {{ mail_address }}
      environment:
        AWS_ACCESS_KEY_ID: "{{ AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "{{ AWS_SECRET_ACCESS_KEY }}"
        AWS_SESSION_TOKEN: "{{ AWS_SESSION_TOKEN }}"

    - name: Deactivate Python venv (noop since certbot run doesn't need active venv)
      shell: deactivate || true
      ignore_errors: yes

    - name: Install Nginx
      shell: |
        amazon-linux-extras install nginx1

    - name: Configure Nginx as a reverse proxy
      copy:
        dest: /etc/nginx/conf.d/petproject.my.conf
        content: |
          server {
              listen 80;
              server_name *.petproject.my;
              return 301 https://$server_name$request_uri;
          }
          server {
              listen 443 ssl;
              server_name *.petproject.my;
              ssl_certificate /etc/letsencrypt/live/petproject.my/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/petproject.my/privkey.pem;
              location / {
                  proxy_pass http://127.0.0.1:8080;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }

    - name: Restart Nginx to apply the new configuration
      systemd:
        name: nginx
        state: restarted
        enabled: yes

    - name: Install wget
      yum:
        name: wget
        state: present

    - name: Download FRP tar.gz file
      get_url:
        url: "https://github.com/fatedier/frp/releases/download/v{{ frp_version }}/frp_{{ frp_version }}_linux_arm64.tar.gz"
        dest: "/tmp/frp_{{ frp_version }}_linux_arm64.tar.gz"

    - name: Extract FRP tar.gz file
      unarchive:
        src: "/tmp/frp_{{ frp_version }}_linux_arm64.tar.gz"
        dest: /opt/
        remote_src: yes

    - name: Move FRP binary to /usr/local/bin
      copy:
        src: "/opt/frp_{{ frp_version }}_linux_arm64/frps"
        dest: /usr/local/bin/frps
        mode: '0755'

    - name: Create configuration directory for FRP
      file:
        path: /etc/frp
        state: directory
        mode: '0755'

    - name: Copy FRP server configuration
      copy:
        src: "/opt/frp_{{ frp_version }}_linux_arm64/frps.toml"
        dest: /etc/frp/frps.toml
        mode: '0644'

    - name: Configure FRPS server
      copy:
        dest: /etc/frp/frps.toml
        content: |
          bindPort = 7000
          vhostHTTPPort = 8080
          webServer.addr = "0.0.0.0"
          webServer.port = 7500

    - name: Create systemd service for FRPS
      copy:
        dest: /etc/systemd/system/frps.service
        content: |
          [Unit]
          Description=FRP Server Service
          After=network.target

          [Service]
          Type=simple
          ExecStart=/usr/local/bin/frps -c /etc/frp/frps.toml
          ExecReload=/usr/local/bin/frps reload -c /etc/frp/frps.toml
          Restart=on-failure
          RestartSec=5s

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd to apply the new service file
      systemd:
        daemon_reload: yes

    - name: Restart FRPS to apply the new configuration
      systemd:
        name: frps
        state: restarted
        enabled: yes
